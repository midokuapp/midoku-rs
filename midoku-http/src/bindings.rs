// Generated by `wit-bindgen` 0.21.0. DO NOT EDIT!
// Options used:
pub mod exports {
    pub mod midoku {
        pub mod midoku_http {
            #[allow(clippy::all)]
            pub mod http {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum Method {
                    Get,
                    Post,
                    Put,
                    Head,
                    Delete,
                }
                impl ::core::fmt::Debug for Method {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            Method::Get => f.debug_tuple("Method::Get").finish(),
                            Method::Post => f.debug_tuple("Method::Post").finish(),
                            Method::Put => f.debug_tuple("Method::Put").finish(),
                            Method::Head => f.debug_tuple("Method::Head").finish(),
                            Method::Delete => f.debug_tuple("Method::Delete").finish(),
                        }
                    }
                }

                impl Method {
                    pub(crate) unsafe fn _lift(val: u8) -> Method {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            0 => Method::Get,
                            1 => Method::Post,
                            2 => Method::Put,
                            3 => Method::Head,
                            4 => Method::Delete,

                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Client {
                    handle: _rt::Resource<Client>,
                }

                type _ClientRep<T> = Option<T>;

                impl Client {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Client`.
                    pub fn new<T: GuestClient>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ClientRep<T> = Some(val);
                        let ptr: *mut _ClientRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestClient>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestClient>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestClient>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestClient` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    fn as_ptr<T: GuestClient>(&self) -> *mut _ClientRep<T> {
                        Client::type_guard::<T>();
                        unsafe { T::_resource_rep(self.handle()).cast() }
                    }
                }

                /// A borrowed version of [`Client`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ClientBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Client>,
                }

                impl<'a> ClientBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestClient>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _ClientRep<T> {
                        Client::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for Client {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]midoku:midoku-http/http")]
                            extern "C" {
                                #[link_name = "[resource-drop]client"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum ResponseError {
                    Moved,
                }
                impl ResponseError {
                    pub fn name(&self) -> &'static str {
                        match self {
                            ResponseError::Moved => "moved",
                        }
                    }
                    pub fn message(&self) -> &'static str {
                        match self {
                            ResponseError::Moved => "",
                        }
                    }
                }
                impl ::core::fmt::Debug for ResponseError {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("ResponseError")
                            .field("code", &(*self as i32))
                            .field("name", &self.name())
                            .field("message", &self.message())
                            .finish()
                    }
                }
                impl ::core::fmt::Display for ResponseError {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        write!(f, "{} (error {})", self.name(), *self as i32)
                    }
                }

                impl std::error::Error for ResponseError {}

                impl ResponseError {
                    pub(crate) unsafe fn _lift(val: u8) -> ResponseError {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            0 => ResponseError::Moved,

                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Response {
                    handle: _rt::Resource<Response>,
                }

                type _ResponseRep<T> = Option<T>;

                impl Response {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Response`.
                    pub fn new<T: GuestResponse>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ResponseRep<T> = Some(val);
                        let ptr: *mut _ResponseRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestResponse>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestResponse>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestResponse>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestResponse` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    fn as_ptr<T: GuestResponse>(&self) -> *mut _ResponseRep<T> {
                        Response::type_guard::<T>();
                        unsafe { T::_resource_rep(self.handle()).cast() }
                    }
                }

                /// A borrowed version of [`Response`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ResponseBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Response>,
                }

                impl<'a> ResponseBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestResponse>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _ResponseRep<T> {
                        Response::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for Response {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]midoku:midoku-http/http")]
                            extern "C" {
                                #[link_name = "[resource-drop]response"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_client_cabi<T: GuestClient>() -> i32 {
                    let result0 = Client::new(T::new());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_client_set_rate_limit_period_cabi<T: GuestClient>(
                    arg0: i32,
                    arg1: i32,
                ) -> i32 {
                    let result0 = T::set_rate_limit_period(
                        ClientBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u32,
                    );
                    let result1 = match result0 {
                        Ok(_) => 0i32,
                        Err(_) => 1i32,
                    };
                    result1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_client_set_rate_limit_burst_cabi<T: GuestClient>(
                    arg0: i32,
                    arg1: i32,
                ) -> i32 {
                    let result0 = T::set_rate_limit_burst(
                        ClientBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u32,
                    );
                    let result1 = match result0 {
                        Ok(_) => 0i32,
                        Err(_) => 1i32,
                    };
                    result1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_client_send_cabi<T: GuestClient>(
                    arg0: i32,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: i32,
                    arg5: *mut u8,
                    arg6: usize,
                    arg7: i32,
                    arg8: *mut u8,
                    arg9: usize,
                ) -> *mut u8 {
                    let len0 = arg3;
                    let bytes0 = _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                    let result9 = T::send(
                        ClientBorrow::lift(arg0 as u32 as usize).get(),
                        Method::_lift(arg1 as u8),
                        _rt::string_lift(bytes0),
                        match arg4 {
                            0 => None,
                            1 => {
                                let e = {
                                    let base7 = arg5;
                                    let len7 = arg6;
                                    let mut result7 = _rt::Vec::with_capacity(len7);
                                    for i in 0..len7 {
                                        let base = base7.add(i * 16);
                                        let e7 = {
                                            let l1 = *base.add(0).cast::<*mut u8>();
                                            let l2 = *base.add(4).cast::<usize>();
                                            let len3 = l2;
                                            let bytes3 =
                                                _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                                            let l4 = *base.add(8).cast::<*mut u8>();
                                            let l5 = *base.add(12).cast::<usize>();
                                            let len6 = l5;
                                            let bytes6 =
                                                _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                                            (_rt::string_lift(bytes3), _rt::string_lift(bytes6))
                                        };
                                        result7.push(e7);
                                    }
                                    _rt::cabi_dealloc(base7, len7 * 16, 4);

                                    result7
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match arg7 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len8 = arg9;

                                    _rt::Vec::from_raw_parts(arg8.cast(), len8, len8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr10 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result9 {
                        Ok(e) => {
                            *ptr10.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr10.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(_) => {
                            *ptr10.add(0).cast::<u8>() = (1i32) as u8;
                        }
                    };
                    ptr10
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_response_status_code_cabi<T: GuestResponse>(
                    arg0: i32,
                ) -> *mut u8 {
                    let result0 = T::status_code(ResponseBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(2).cast::<u16>() = (_rt::as_i32(e)) as u16;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(2).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_response_headers_cabi<T: GuestResponse>(
                    arg0: i32,
                ) -> *mut u8 {
                    let result0 = T::headers(ResponseBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let vec5 = e;
                            let len5 = vec5.len();
                            let layout5 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec5.len() * 16, 4);
                            let result5 = if layout5.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout5);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec5.into_iter().enumerate() {
                                let base = result5.add(i * 16);
                                {
                                    let (t2_0, t2_1) = e;
                                    let vec3 = (t2_0.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *base.add(4).cast::<usize>() = len3;
                                    *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                                    let vec4 = (t2_1.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *base.add(12).cast::<usize>() = len4;
                                    *base.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                }
                            }
                            *ptr1.add(8).cast::<usize>() = len5;
                            *ptr1.add(4).cast::<*mut u8>() = result5;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(4).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_response_headers<T: GuestResponse>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l5 = *arg0.add(4).cast::<*mut u8>();
                            let l6 = *arg0.add(8).cast::<usize>();
                            let base7 = l5;
                            let len7 = l6;
                            for i in 0..len7 {
                                let base = base7.add(i * 16);
                                {
                                    let l1 = *base.add(0).cast::<*mut u8>();
                                    let l2 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l1, l2, 1);
                                    let l3 = *base.add(8).cast::<*mut u8>();
                                    let l4 = *base.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                }
                            }
                            _rt::cabi_dealloc(base7, len7 * 16, 4);
                        }
                        _ => (),
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_response_bytes_cabi<T: GuestResponse>(
                    arg0: i32,
                ) -> *mut u8 {
                    let result0 = T::bytes(ResponseBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let vec2 = (e).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *ptr1.add(8).cast::<usize>() = len2;
                            *ptr1.add(4).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(4).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_response_bytes<T: GuestResponse>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            let base3 = l1;
                            let len3 = l2;
                            _rt::cabi_dealloc(base3, len3 * 1, 1);
                        }
                        _ => (),
                    }
                }
                pub trait Guest {
                    type Client: GuestClient;
                    type Response: GuestResponse;
                }
                pub trait GuestClient: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]midoku:midoku-http/http")]
                            extern "C" {
                                #[link_name = "[resource-new]client"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]midoku:midoku-http/http")]
                            extern "C" {
                                #[link_name = "[resource-rep]client"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn new() -> Self;
                    /// Sets the duration to replenish one burst or one cell if not initialized yet.
                    fn set_rate_limit_period(&self, seconds: u32) -> Result<(), ()>;
                    /// Sets the burst size for the set period or 1 second if not initialized yet.
                    fn set_rate_limit_burst(&self, burst_size: u32) -> Result<(), ()>;
                    /// Makes the HTTP request synchronously.
                    fn send(
                        &self,
                        method: Method,
                        url: _rt::String,
                        headers: Option<_rt::Vec<(_rt::String, _rt::String)>>,
                        body_bytes: Option<_rt::Vec<u8>>,
                    ) -> Result<Response, ()>;
                }
                pub trait GuestResponse: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]midoku:midoku-http/http")]
                            extern "C" {
                                #[link_name = "[resource-new]response"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]midoku:midoku-http/http")]
                            extern "C" {
                                #[link_name = "[resource-rep]response"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn status_code(&self) -> Result<u16, ResponseError>;
                    /// Consumes the response when called.
                    fn headers(
                        &self,
                    ) -> Result<_rt::Vec<(_rt::String, _rt::String)>, ResponseError>;
                    /// Consumes the response when called.
                    fn bytes(&self) -> Result<_rt::Vec<u8>, ResponseError>;
                }
                #[doc(hidden)]

                macro_rules! __export_midoku_midoku_http_http_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "midoku:midoku-http/http#[constructor]client"]
    unsafe extern "C" fn export_constructor_client() -> i32 {
      $($path_to_types)*::_export_constructor_client_cabi::<<$ty as $($path_to_types)*::Guest>::Client>()
    }
    #[export_name = "midoku:midoku-http/http#[method]client.set-rate-limit-period"]
    unsafe extern "C" fn export_method_client_set_rate_limit_period(arg0: i32,arg1: i32,) -> i32 {
      $($path_to_types)*::_export_method_client_set_rate_limit_period_cabi::<<$ty as $($path_to_types)*::Guest>::Client>(arg0, arg1)
    }
    #[export_name = "midoku:midoku-http/http#[method]client.set-rate-limit-burst"]
    unsafe extern "C" fn export_method_client_set_rate_limit_burst(arg0: i32,arg1: i32,) -> i32 {
      $($path_to_types)*::_export_method_client_set_rate_limit_burst_cabi::<<$ty as $($path_to_types)*::Guest>::Client>(arg0, arg1)
    }
    #[export_name = "midoku:midoku-http/http#[method]client.send"]
    unsafe extern "C" fn export_method_client_send(arg0: i32,arg1: i32,arg2: *mut u8,arg3: usize,arg4: i32,arg5: *mut u8,arg6: usize,arg7: i32,arg8: *mut u8,arg9: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_client_send_cabi::<<$ty as $($path_to_types)*::Guest>::Client>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
    }
    #[export_name = "midoku:midoku-http/http#[method]response.status-code"]
    unsafe extern "C" fn export_method_response_status_code(arg0: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_response_status_code_cabi::<<$ty as $($path_to_types)*::Guest>::Response>(arg0)
    }
    #[export_name = "midoku:midoku-http/http#[method]response.headers"]
    unsafe extern "C" fn export_method_response_headers(arg0: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_response_headers_cabi::<<$ty as $($path_to_types)*::Guest>::Response>(arg0)
    }
    #[export_name = "cabi_post_midoku:midoku-http/http#[method]response.headers"]
    unsafe extern "C" fn _post_return_method_response_headers(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_response_headers::<<$ty as $($path_to_types)*::Guest>::Response>(arg0)
    }
    #[export_name = "midoku:midoku-http/http#[method]response.bytes"]
    unsafe extern "C" fn export_method_response_bytes(arg0: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_response_bytes_cabi::<<$ty as $($path_to_types)*::Guest>::Response>(arg0)
    }
    #[export_name = "cabi_post_midoku:midoku-http/http#[method]response.bytes"]
    unsafe extern "C" fn _post_return_method_response_bytes(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_response_bytes::<<$ty as $($path_to_types)*::Guest>::Response>(arg0)
    }
  };);
}
                #[doc(hidden)]
                pub(crate) use __export_midoku_midoku_http_http_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            }
        }
    }
}
mod _rt {

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub use alloc_crate::string::String;

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub use alloc_crate::alloc;
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_prelude_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::midoku::midoku_http::http::__export_midoku_midoku_http_http_cabi!($ty with_types_in $($path_to_types_root)*::exports::midoku::midoku_http::http);
  )
}
#[doc(inline)]
pub(crate) use __export_prelude_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.21.0:prelude:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 687] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xb1\x04\x01A\x02\x01\
A\x02\x01B\"\x01m\x05\x03get\x04post\x03put\x04head\x06delete\x04\0\x06method\x03\
\0\0\x04\0\x06client\x03\x01\x01m\x01\x05moved\x04\0\x0eresponse-error\x03\0\x03\
\x04\0\x08response\x03\x01\x01i\x02\x01@\0\0\x06\x04\0\x13[constructor]client\x01\
\x07\x01h\x02\x01j\0\0\x01@\x02\x04self\x08\x07secondsy\0\x09\x04\0$[method]clie\
nt.set-rate-limit-period\x01\x0a\x01@\x02\x04self\x08\x0aburst-sizey\0\x09\x04\0\
#[method]client.set-rate-limit-burst\x01\x0b\x01o\x02ss\x01p\x0c\x01k\x0d\x01p}\x01\
k\x0f\x01i\x05\x01j\x01\x11\0\x01@\x05\x04self\x08\x06method\x01\x03urls\x07head\
ers\x0e\x0abody-bytes\x10\0\x12\x04\0\x13[method]client.send\x01\x13\x01h\x05\x01\
j\x01{\x01\x04\x01@\x01\x04self\x14\0\x15\x04\0\x1c[method]response.status-code\x01\
\x16\x01j\x01\x0d\x01\x04\x01@\x01\x04self\x14\0\x17\x04\0\x18[method]response.h\
eaders\x01\x18\x01j\x01\x0f\x01\x04\x01@\x01\x04self\x14\0\x19\x04\0\x16[method]\
response.bytes\x01\x1a\x04\x01\x17midoku:midoku-http/http\x05\0\x04\x01\x1amidok\
u:midoku-http/prelude\x04\0\x0b\x0d\x01\0\x07prelude\x03\0\0\0G\x09producers\x01\
\x0cprocessed-by\x02\x0dwit-component\x070.201.0\x10wit-bindgen-rust\x060.21.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
